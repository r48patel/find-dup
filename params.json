{
  "name": "Find-dup",
  "tagline": "",
  "body": "# Find Duplicates\r\nThis script can be used to find any duplicate files. \r\n\r\n## Available Options\r\n`--location` \r\n- Description: The root level location where to start the search.\r\n- Type: String\r\n- Default: The working directory of script.\r\n- Example: `python find_dup.py --location some/root/location/`\r\n\r\n`--custom-locations` \r\n- Description: List of custom location to check.\r\n- Type: list (space separated parameter values)\r\n- Example: `python find_dup.py --custom-locations location/one/ location/two/`\r\n\r\n`--levels`\r\n- Description: How many levels to check from the root level\r\n- Type: Integer\r\n- Default: 1 (only check root folder)\r\n- Example: `python find_dup.py --location some/location --levels 2`\r\n\r\n`--action`\r\n- Description: What actions to take when duplicate files are found\r\n- Type: String\r\n- Choices: \r\n    + dry_run\r\n    + rename\r\n    + delete\r\n- Default: dry_run\r\n\r\n`--type`\r\n- Description: Default list of different extension for certain types of file\r\n- Type: String\r\n- Choices:\r\n    + pictures => ['png', 'jpeg', 'dng', 'NEF', 'jpg']\r\n    + movies => ['mov, mp4, wmv', 'avi', 'mpg']\r\n\r\n`--only-extension`\r\n- Description: Only look at files with given extensions.\r\n- Type: List\r\n- Example: `python find_dup.py --location some/location --only-extensions exe1 exe2 pdf`\r\n\r\n`--exclude-extensions`\r\n- Description: Do not look at file with given extensions.\r\n- Type: List\r\n- Example: `python find_dup.py --location some/location --only-extensions mov mp4`\r\n\r\n`--delete-empty-folders`\r\n- Description: If there are no files in the folder, after either deleting or renaming,  \r\n- Type: Boolean\r\n- Default: False\r\n- Example: `python finde_dup.py --location some/location --delete-empty-folders`\r\n\r\n##Usage\r\n- Base directory search (will not include any subdirectories)\r\n    + `python find_dup.py --location some/location`\r\n    + `python find_dup.py --location some/location --level=1`\r\n    + Search current directory\r\n        * `python find_dup.py`\r\n    + Search current directory and delete empty folders\r\n        * `python find_dup.py --delete-empty-folders`\r\n\r\n- Include subdirectories (upto N level)\r\n    + `pyhton find_dup.py -`\r\n\r\n\r\n##Requirement\r\nFollowing packages are required for this script to run. Instruction on how to install packages is below.\r\n- enum34\r\n\r\n##Installint Python packages\r\n###Windows\r\n1. Add python to `path` via cmd line\r\n\r\n>If you already have python in your path, skip to step 2.\r\n\r\n```\r\nD:\\>set path=%path%;D:\\Python27\r\n```\r\n> Typically Python file are under 'C:\\Python27'. Make sure to check your location.\r\n\r\n2. Install pip by following these [instructions](https://pip.pypa.io/en/latest/installing/)\r\n\r\n>If you already have pip installed, skip to step 3.\r\n\r\n3. Install packages via pip\r\n\r\n```\r\n$ pip install enum34\r\n```\r\n\r\nTo use requirement.txt\r\n\r\n```\r\n$ pip install -r requirement.txt\r\n```\r\n\r\n###Mac\r\n1. Install Homebrew by following these [instrictions](http://brew.sh/)\r\n\r\n>If you already have homebrew installed, skip to step 2.\r\n\r\n2. Install pip\r\n\r\n>if you already have python/pip installed, skip to step 3.\r\n\r\n```\r\n$ brew install python\r\n```\r\n\r\n3. Install pacakges via pip\r\n```\r\n$ pip install enum34\r\n```\r\n\r\nTo use requirement.txt\r\n\r\n```\r\n$ pip install -r requirement.txt\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}